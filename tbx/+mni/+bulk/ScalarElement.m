classdef ScalarElement < mni.bulk.BulkData
    %ScalarElement Describes an element that connects to two nodes or to
    %one node and the ground.
    %
    % The defintion of the 'ScalarElement' matches the various scalar
    % elements in MSC.Nastran such as CMASS, CELAS, CDAMP.
    %
    % Valid Bulk Data Types:
    %   - CMASS1
    %   - CMASS2
    %   - CMASS3
    %   - CMASS4
        
    methods % construction
        function obj = ScalarElement(varargin)
            
            %Initialise the bulk data sets
            addBulkDataSet(obj, 'CMASS1', ...
                'BulkProps'  , {'EID', 'PID', 'G1', 'C1', 'G2', 'C2'}  , ...
                'PropTypes'  , {'i'  , 'i'  , 'i' , 'c' , 'i' , 'c' }  , ...
                'PropDefault', {''   , ''   , ''  , ''  , 0   , ''  }  , ...
                'IDProp'     , 'EID', ...
                'SetMethod'  , {'C1', @validateDOF, 'C2', @validateDOF}, ...
                'Connections', { ...
                'PID', 'mni.bulk.Property', 'MassProp', ...
                'G1' , 'GRID'         , 'Node1'   , ...
                'G2' , 'GRID'         , 'Node2'});
            addBulkDataSet(obj, 'CMASS2', ...
                'BulkProps'  , {'EID', 'M'  , 'G1', 'C1', 'G2', 'C2'}  , ...
                'PropTypes'  , {'i'  , 'r'  , 'i' , 'c' , 'i' , 'c' }  , ...
                'PropDefault', {''   , ''   , ''  , ''  , 0   , ''  }  , ...
                'IDProp'     , 'EID', ...
                'SetMethod'  , {'C1', @validateDOF, 'C2', @validateDOF}, ...
                'Connections', { ...
                'G1' , 'GRID' , 'Node1', ...
                'G2' , 'GRID' , 'Node2'});
            addBulkDataSet(obj, 'CMASS3', ...
                'BulkProps'  , {'EID', 'PID', 'S'}, ...
                'PropTypes'  , {'i'  , 'r'  , 'i'}, ...
                'PropDefault', {''   , ''   , '' }, ...
                'IDProp'     , 'EID', ...
                'PropMask'   , {'S', 2}           , ...
                'AttrList'   , {'S', {'nrows', 2}}, ...
                'Connections', { ...
                'PID', 'mni.bulk.Property', 'MassProp', ...
                'S'  , 'SPOINT'       , 'ScalarNode'});
            addBulkDataSet(obj, 'CMASS4', ...
                'BulkProps'  , {'EID', 'M', 'S'  }, ...
                'PropTypes'  , {'i'  , 'r'  , 'i'}, ...
                'PropDefault', {''   , ''   , '' }, ...
                'IDProp'     , 'EID', ...
                'PropMask'   , {'S', 2}           , ...
                'AttrList'   , {'S', {'nrows', 2}}, ...
                'Connections', {'S', 'SPOINT', 'ScalarNode'});
            addBulkDataSet(obj, 'CELAS1', ...
                'BulkProps'  , {'EID', 'PID', 'G1', 'C1', 'G2', 'C2'}  , ...
                'PropTypes'  , {'i'  , 'i'  , 'i' , 'c' , 'i' , 'c' }  , ...
                'PropDefault', {''   , ''   , ''  , ''  , 0   , ''  }  , ...
                'IDProp'     , 'EID', ...
                'SetMethod'  , {'C1', @validateDOF, 'C2', @validateDOF}, ...
                'Connections', { ...
                'PID', 'mni.bulk.Property', 'SpringProp', ...
                'G1' , 'GRID'         , 'Node1'     , ...
                'G2' , 'GRID'         , 'Node2'});
            addBulkDataSet(obj, 'CELAS2', ...
                'BulkProps'  , {'EID', 'K'  , 'G1', 'C1', 'G2', 'C2', 'GE', 'S'}, ...
                'PropTypes'  , {'i'  , 'r'  , 'i' , 'c' , 'i' , 'c' , 'r' , 'r'}, ...
                'PropDefault', {''   , ''   , ''  , ''  , 0   , ''  , 0   , 0  }, ...
                'IDProp'     , 'EID', ...
                'SetMethod'  , {'C1', @validateDOF, 'C2', @validateDOF}, ...
                'Connections', { ...
                'G1' , 'GRID' , 'Node1'   , ...
                'G2' , 'GRID' , 'Node2'});
            varargin = parse(obj, varargin{:});
            preallocate(obj);
            
        end
    end
    
    methods % visualisation
        function hg = drawElement(obj, ~, hAx, varargin)

            hg = [];
            
            if ~all(cellfun(@(x) isprop(obj, x), {'Node1', 'Node2'}))
                warning(['Expected the scalar element object to have a ', ...
                    '''Node1'' and ''Node2'' property. Check the class ', ...
                    'constructor.']);
                return
            end
            
            %TODO - Add an option to draw grounded elements with a
            %connection to the origin
            
            %Grab the node coordinates            
            if isempty(obj.Node1)
                coords1 = zeros(3, 1);
            else
                coords1 = getDrawCoords(obj.Node1, obj.DrawMode);
            end
            if isempty(obj.Node2)
                coords2 = zeros(3, 1);
            else
                coords2 = getDrawCoords(obj.Node2, obj.DrawMode);
            end
            
            %Check index for grounded terminals
            ind  = [obj.Node1Index ; obj.Node2Index];
            idx  = ~any(ind == 0);
            indG = ind(:, ~idx); %grounded
            if isempty(indG)
                %If Node1 or Node2 is not defined then we end up with a 1x0
                %empty array which causes the indexing to fail.
                indG = double.empty(2, 0);
            end
            
            %Grab coordinates
            % - Grounded elements will be plotted as marker at the opposite
            %   node to the grounded node. e.g. if node 1 is grounded then
            %   we plot the marker at node 2 coordinates
            x  = [coords1(:, indG(2, indG(2, :) ~= 0)), coords2(:, indG(1, indG(1, :) ~= 0))];
            if isempty(obj.Node1Index)
                xA = double.empty(3, 0);
            else
                xA = coords1(:, obj.Node1Index(idx));
            end
            if isempty(obj.Node2Index)
                xB = double.empty(3,0);
            else
                xB = coords2(:, obj.Node2Index(idx));
            end
            
            hg{1} = drawNodes(x, hAx, ...
                'Marker'         , 's', ...
                'MarkerFaceColor', 'b', ...
                'Tag'            , 'Scalar Element');
            hg{2} = drawLines(xA, xB, hAx, ...
                'Color'          , 'b' , ...
                'LineStyle'      , '--', ...
                'Marker'         , 's' , ...
                'MarkerFaceColor', 'b' , ...
                'MarkerEdgeColor', 'k' , ...
                'Tag'            , 'Scalar Element');
            hg = horzcat(hg{:});
            
        end
    end
    
end

